
// O(N) space 

class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = ratings.size();
        vector<int> ans(n, 1);
        
        if(n == 1) return 1;
        
        for(int i=1; i<n; i++) {
            if(ratings[i] > ratings[i-1]) {
                ans[i] = ans[i-1] + 1; 
            }
        }
        
        for(int i=n-2; i>=0; i--) {
             if(ratings[i] > ratings[i+1] && ans[i] <= ans[i+1]) {
                ans[i] = ans[i+1] + 1; 
            }
        }
        int minCandy = 0;
        for(auto it: ans) {
            minCandy += it;
        }
        return minCandy;
    }
};





// o(1) space 


class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = ratings.size();
        int minCandy = n; // assign 1 candy to every childer
        int i = 1; // i is the pointer to point 1 index childern 
        
        while( i < n) {
            
//             when same rating childern are their 
            if(ratings[i] == ratings[i-1]) {
                i++;
                continue;
            }
            
//             when increasing slope is come
            int peak = 0;
            while(ratings[i] > ratings[i-1]) {
                peak++;
                minCandy += peak;
                i++;
                
                if(i == n) return minCandy;
            }
            
            
//             when decreasing slope is come
            int downPeak = 0;
            while(i<n && ratings[i] < ratings[i-1]) {
                downPeak++;
                minCandy += downPeak;
                i++;
            }
            
            minCandy -= min(peak, downPeak);
        }
        
        return minCandy;
    }
};
